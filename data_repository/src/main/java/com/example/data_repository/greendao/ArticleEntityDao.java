package com.example.data_repository.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.data_repository.entities.ArticleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE_ENTITY".
*/
public class ArticleEntityDao extends AbstractDao<ArticleEntity, Void> {

    public static final String TABLENAME = "ARTICLE_ENTITY";

    /**
     * Properties of entity ArticleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Guid = new Property(0, String.class, "guid", false, "GUID");
        public final static Property Category = new Property(1, String.class, "category", false, "CATEGORY");
        public final static Property Create_date = new Property(2, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Link = new Property(4, String.class, "link", false, "LINK");
        public final static Property Modify_date = new Property(5, String.class, "modify_date", false, "MODIFY_DATE");
        public final static Property PubDate = new Property(6, String.class, "pubDate", false, "PUB_DATE");
        public final static Property Published = new Property(7, String.class, "published", false, "PUBLISHED");
        public final static Property Rss_link = new Property(8, String.class, "rss_link", false, "RSS_LINK");
        public final static Property Rss_published = new Property(9, String.class, "rss_published", false, "RSS_PUBLISHED");
        public final static Property Rss_title = new Property(10, String.class, "rss_title", false, "RSS_TITLE");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
    }


    public ArticleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE_ENTITY\" (" + //
                "\"GUID\" TEXT," + // 0: guid
                "\"CATEGORY\" TEXT," + // 1: category
                "\"CREATE_DATE\" TEXT," + // 2: create_date
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"LINK\" TEXT," + // 4: link
                "\"MODIFY_DATE\" TEXT," + // 5: modify_date
                "\"PUB_DATE\" TEXT," + // 6: pubDate
                "\"PUBLISHED\" TEXT," + // 7: published
                "\"RSS_LINK\" TEXT," + // 8: rss_link
                "\"RSS_PUBLISHED\" TEXT," + // 9: rss_published
                "\"RSS_TITLE\" TEXT," + // 10: rss_title
                "\"TITLE\" TEXT);"); // 11: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleEntity entity) {
        stmt.clearBindings();
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(1, guid);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(2, category);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(3, create_date);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String modify_date = entity.getModify_date();
        if (modify_date != null) {
            stmt.bindString(6, modify_date);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(7, pubDate);
        }
 
        String published = entity.getPublished();
        if (published != null) {
            stmt.bindString(8, published);
        }
 
        String rss_link = entity.getRss_link();
        if (rss_link != null) {
            stmt.bindString(9, rss_link);
        }
 
        String rss_published = entity.getRss_published();
        if (rss_published != null) {
            stmt.bindString(10, rss_published);
        }
 
        String rss_title = entity.getRss_title();
        if (rss_title != null) {
            stmt.bindString(11, rss_title);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleEntity entity) {
        stmt.clearBindings();
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(1, guid);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(2, category);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(3, create_date);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String modify_date = entity.getModify_date();
        if (modify_date != null) {
            stmt.bindString(6, modify_date);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(7, pubDate);
        }
 
        String published = entity.getPublished();
        if (published != null) {
            stmt.bindString(8, published);
        }
 
        String rss_link = entity.getRss_link();
        if (rss_link != null) {
            stmt.bindString(9, rss_link);
        }
 
        String rss_published = entity.getRss_published();
        if (rss_published != null) {
            stmt.bindString(10, rss_published);
        }
 
        String rss_title = entity.getRss_title();
        if (rss_title != null) {
            stmt.bindString(11, rss_title);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ArticleEntity readEntity(Cursor cursor, int offset) {
        ArticleEntity entity = new ArticleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // guid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // create_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // link
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // modify_date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pubDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // published
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rss_link
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rss_published
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rss_title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleEntity entity, int offset) {
        entity.setGuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCategory(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreate_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModify_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPubDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPublished(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRss_link(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRss_published(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRss_title(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ArticleEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ArticleEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(ArticleEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
